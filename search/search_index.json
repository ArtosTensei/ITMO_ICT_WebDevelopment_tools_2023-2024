{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u0421\u0430\u0443\u043d\u0438\u043d \u0410\u043d\u0442\u043e\u043d \u0420\u0430\u0431\u043e\u0442\u044b \u043d\u0430 GitHub","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u0421\u0430\u0443\u043d\u0438\u043d \u0410\u043d\u0442\u043e\u043d"},{"location":"#_1","text":"","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u0421\u0430\u0443\u043d\u0438\u043d \u0410\u043d\u0442\u043e\u043d"},{"location":"#github","text":"","title":"\u0420\u0430\u0431\u043e\u0442\u044b \u043d\u0430 GitHub"},{"location":"lab1/configuration/","text":"\u041e\u0441\u043d\u043e\u0432\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 models - \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f endpoints - \u043f\u0443\u0442\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 main - \u0442\u043e\u0447\u043a\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 database - \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 auth - \u0443\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438","title":"\u041e\u0441\u043d\u043e\u0432\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"lab1/configuration/#_1","text":"models - \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f endpoints - \u043f\u0443\u0442\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 main - \u0442\u043e\u0447\u043a\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 database - \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 auth - \u0443\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438","title":"\u041e\u0441\u043d\u043e\u0432\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"lab1/endpoints/","text":"\u042d\u043d\u0434\u043f\u043e\u0439\u043d\u0442\u044b Auth @auth_router.post('/registration', status_code=201, description='Register new user') def register(user: UserCreate, session=Depends(get_session)): users = session.exec(select(User)).all() if any(x.username == user.username for x in users): raise HTTPException(status_code=400, detail='Username is taken') hashed_pwd = get_password_hash(user.password) user = User(username=user.username, password=hashed_pwd) session.add(user) session.commit() return {\"status\": 201, \"message\": \"Created\"} @auth_router.post('/login') def login(user: UserCreate, session=Depends(get_session)): user_found = session.exec(select(User).where(User.username == user.username)).first() if not user_found: raise HTTPException(status_code=401, detail='Invalid username and/or password') verified = verify_password(user.password, user_found.password) if not verified: raise HTTPException(status_code=401, detail='Invalid username and/or password') token = encode_token(user_found.username) return {'token': token} @auth_router.get('/me', response_model=UserShow) def get_current_user(user: User = Depends(get_current_user)) -> User: return user @auth_router.patch(\"/me/change-password\") def user_pwd(user_pwd: ChangePassword, session=Depends(get_session), current=Depends(get_current_user)): found_user = session.get(User, current.id) if not found_user: raise HTTPException(status_code=404, detail=\"User not found\") verified = verify_password(user_pwd.old_password, found_user.password) if not verified: raise HTTPException(status_code=400, detail=\"Invalid old password\") hashed_pwd = get_password_hash(user_pwd.new_password) found_user.password = hashed_pwd session.add(found_user) session.commit() session.refresh(found_user) return {\"status\": 200, \"message\": \"password changed successfully\"} Users @user_router.get(\"/users/list\") def user_list(session=Depends(get_session)) -> list[User]: users = session.exec(select(User)).all() user_models = [user.model_dump(exclude={'password'}) for user in users] return user_models @user_router.get(\"/users/{user_id}\") def user_get(user_id: int, session=Depends(get_session)) -> UserShow: user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") return user @user_router.delete(\"/users/delete/{travel_id}\") def traveltogether_delete(user_id: int, session=Depends(get_session)): user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"user not found\") session.delete(user) session.commit() return {\"ok\": True} Locations @location_router.post(\"/area-create\") def area_create(area: AreaBase, session=Depends(get_session)) \\ -> TypedDict('Response', {\"status\": int, \"data\": Area}): area = Area.model_validate(area) session.add(area) session.commit() session.refresh(area) return {\"status\": 200, \"data\": area} @location_router.get(\"/list-areas\") def areas_list(session=Depends(get_session)) -> list[Area]: return session.query(Area).all() @location_router.get(\"/area/{area_id}\", response_model=AreaShow) def area_get(area_id: int, session=Depends(get_session)): obj = session.get(Area, area_id) if obj is None: raise HTTPException(status_code=404, detail=\"subarea not found\") return obj @location_router.patch(\"/area/update/{area_id}\") def area_update(area_id: int, area: AreaBase, session=Depends(get_session)) -> Area: db_area = session.get(Area, area_id) if not db_area: raise HTTPException(status_code=404, detail=\"area not found\") area_data = area.model_dump(exclude_unset=True) for key, value in area_data.items(): setattr(db_area, key, value) session.add(db_area) session.commit() session.refresh(db_area) return db_area @location_router.delete(\"/area/delete/{area_id}\") def area_delete(area_id: int, session=Depends(get_session)): area = session.get(Area, area_id) if not area: raise HTTPException(status_code=404, detail=\"area not found\") session.delete(area) session.commit() return {\"ok\": True} @location_router.post(\"/place-create\") def place_create(place: PlaceBase, session=Depends(get_session)) \\ -> TypedDict('Response', {\"status\": int, \"data\": Place}): place = Place.model_validate(place) session.add(place) session.commit() session.refresh(place) return {\"status\": 200, \"data\": place} @location_router.get(\"/list-places-in-area/{area_id}\") def places_list(area_id: int, session=Depends(get_session)) -> list[Place]: return session.query(Place).filter(Place.area_id == area_id).all() @location_router.get(\"/place/{place_id}\", response_model=PlaceShow) def place_get(place_id: int, session=Depends(get_session)): obj = session.get(Place, place_id) if obj is None: raise HTTPException(status_code=404, detail=\"subplace not found\") return obj @location_router.patch(\"/place/update/{place_id}\") def place_update(place_id: int, place: PlaceBase, session=Depends(get_session)) -> Place: db_place = session.get(place, place_id) if not db_place: raise HTTPException(status_code=404, detail=\"place not found\") place_data = place.model_dump(exclude_unset=True) for key, value in place_data.items(): setattr(db_place, key, value) session.add(db_place) session.commit() session.refresh(db_place) return db_place @location_router.delete(\"/place/delete/{place_id}\") def place_delete(place_id: int, session=Depends(get_session)): place = session.get(Place, place_id) if not place: raise HTTPException(status_code=404, detail=\"place not found\") session.delete(place) session.commit() return {\"ok\": True} Travel @travel_router.post(\"/travel-create\") def travel_create(travel: TravelBase, session=Depends(get_session)) \\ -> TypedDict('Response', {\"status\": int, \"data\": Travel}): travel = Travel.model_validate(travel) session.add(travel) session.commit() session.refresh(travel) return {\"status\": 200, \"data\": travel} @travel_router.get(\"/list-travels\") def travels_list(session=Depends(get_session)) -> list[Travel]: return session.query(Travel).all() @travel_router.get(\"/travel/{travel_id}\", response_model=TravelShow) def travel_get(travel_id: int, session=Depends(get_session)): obj = session.get(Travel, travel_id) if obj is None: raise HTTPException(status_code=404, detail=\"subtravel not found\") return obj @travel_router.patch(\"/travel/update/{travel_id}\") def travel_update(travel_id: int, travel: TravelBase, session=Depends(get_session)) -> Travel: db_travel = session.get(Travel, travel_id) if not db_travel: raise HTTPException(status_code=404, detail=\"travel not found\") travel_data = travel.model_dump(exclude_unset=True) for key, value in travel_data.items(): setattr(db_travel, key, value) session.add(db_travel) session.commit() session.refresh(db_travel) return db_travel @travel_router.delete(\"/travel/delete/{travel_id}\") def travel_delete(travel_id: int, session=Depends(get_session)): travel = session.get(Travel, travel_id) if not travel: raise HTTPException(status_code=404, detail=\"travel not found\") session.delete(travel) session.commit() return {\"ok\": True} @travel_router.post(\"/travel-together-create\") def traveltogether_create(travel: TravelTogetherBase, session=Depends(get_session)) \\ -> TypedDict('Response', {\"status\": int, \"data\": TravelTogether}): travel = TravelTogether.model_validate(travel) session.add(travel) session.commit() session.refresh(travel) return {\"status\": 200, \"data\": travel} @travel_router.get(\"/list-traveltogethers\") def traveltogethers_list(session=Depends(get_session)) -> list[TravelTogether]: return session.query(TravelTogether).all() @travel_router.get(\"/traveltogether/{travel_id}\", response_model=TravelTogetherShow) def traveltogether_get(travel_id: int, session=Depends(get_session)): obj = session.get(TravelTogether, travel_id) if obj is None: raise HTTPException(status_code=404, detail=\"travel not found\") return obj @travel_router.patch(\"/traveltogether/update/{travel_id}\") def traveltogether_update(travel_id: int, travel: TravelTogetherBase, session=Depends(get_session)) -> TravelTogether: db_travel = session.get(TravelTogether, travel_id) if not db_travel: raise HTTPException(status_code=404, detail=\"travel not found\") travel_data = travel.model_dump(exclude_unset=True) for key, value in travel_data.items(): setattr(db_travel, key, value) session.add(db_travel) session.commit() session.refresh(db_travel) return db_travel @travel_router.delete(\"/traveltogether/delete/{travel_id}\") def traveltogether_delete(travel_id: int, session=Depends(get_session)): travel = session.get(TravelTogether, travel_id) if not travel: raise HTTPException(status_code=404, detail=\"travel not found\") session.delete(travel) session.commit() return {\"ok\": True}","title":"\u042d\u043d\u0434\u043f\u043e\u0439\u043d\u0442\u044b"},{"location":"lab1/endpoints/#_1","text":"","title":"\u042d\u043d\u0434\u043f\u043e\u0439\u043d\u0442\u044b"},{"location":"lab1/endpoints/#auth","text":"@auth_router.post('/registration', status_code=201, description='Register new user') def register(user: UserCreate, session=Depends(get_session)): users = session.exec(select(User)).all() if any(x.username == user.username for x in users): raise HTTPException(status_code=400, detail='Username is taken') hashed_pwd = get_password_hash(user.password) user = User(username=user.username, password=hashed_pwd) session.add(user) session.commit() return {\"status\": 201, \"message\": \"Created\"} @auth_router.post('/login') def login(user: UserCreate, session=Depends(get_session)): user_found = session.exec(select(User).where(User.username == user.username)).first() if not user_found: raise HTTPException(status_code=401, detail='Invalid username and/or password') verified = verify_password(user.password, user_found.password) if not verified: raise HTTPException(status_code=401, detail='Invalid username and/or password') token = encode_token(user_found.username) return {'token': token} @auth_router.get('/me', response_model=UserShow) def get_current_user(user: User = Depends(get_current_user)) -> User: return user @auth_router.patch(\"/me/change-password\") def user_pwd(user_pwd: ChangePassword, session=Depends(get_session), current=Depends(get_current_user)): found_user = session.get(User, current.id) if not found_user: raise HTTPException(status_code=404, detail=\"User not found\") verified = verify_password(user_pwd.old_password, found_user.password) if not verified: raise HTTPException(status_code=400, detail=\"Invalid old password\") hashed_pwd = get_password_hash(user_pwd.new_password) found_user.password = hashed_pwd session.add(found_user) session.commit() session.refresh(found_user) return {\"status\": 200, \"message\": \"password changed successfully\"}","title":"Auth"},{"location":"lab1/endpoints/#users","text":"@user_router.get(\"/users/list\") def user_list(session=Depends(get_session)) -> list[User]: users = session.exec(select(User)).all() user_models = [user.model_dump(exclude={'password'}) for user in users] return user_models @user_router.get(\"/users/{user_id}\") def user_get(user_id: int, session=Depends(get_session)) -> UserShow: user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") return user @user_router.delete(\"/users/delete/{travel_id}\") def traveltogether_delete(user_id: int, session=Depends(get_session)): user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"user not found\") session.delete(user) session.commit() return {\"ok\": True}","title":"Users"},{"location":"lab1/endpoints/#locations","text":"@location_router.post(\"/area-create\") def area_create(area: AreaBase, session=Depends(get_session)) \\ -> TypedDict('Response', {\"status\": int, \"data\": Area}): area = Area.model_validate(area) session.add(area) session.commit() session.refresh(area) return {\"status\": 200, \"data\": area} @location_router.get(\"/list-areas\") def areas_list(session=Depends(get_session)) -> list[Area]: return session.query(Area).all() @location_router.get(\"/area/{area_id}\", response_model=AreaShow) def area_get(area_id: int, session=Depends(get_session)): obj = session.get(Area, area_id) if obj is None: raise HTTPException(status_code=404, detail=\"subarea not found\") return obj @location_router.patch(\"/area/update/{area_id}\") def area_update(area_id: int, area: AreaBase, session=Depends(get_session)) -> Area: db_area = session.get(Area, area_id) if not db_area: raise HTTPException(status_code=404, detail=\"area not found\") area_data = area.model_dump(exclude_unset=True) for key, value in area_data.items(): setattr(db_area, key, value) session.add(db_area) session.commit() session.refresh(db_area) return db_area @location_router.delete(\"/area/delete/{area_id}\") def area_delete(area_id: int, session=Depends(get_session)): area = session.get(Area, area_id) if not area: raise HTTPException(status_code=404, detail=\"area not found\") session.delete(area) session.commit() return {\"ok\": True} @location_router.post(\"/place-create\") def place_create(place: PlaceBase, session=Depends(get_session)) \\ -> TypedDict('Response', {\"status\": int, \"data\": Place}): place = Place.model_validate(place) session.add(place) session.commit() session.refresh(place) return {\"status\": 200, \"data\": place} @location_router.get(\"/list-places-in-area/{area_id}\") def places_list(area_id: int, session=Depends(get_session)) -> list[Place]: return session.query(Place).filter(Place.area_id == area_id).all() @location_router.get(\"/place/{place_id}\", response_model=PlaceShow) def place_get(place_id: int, session=Depends(get_session)): obj = session.get(Place, place_id) if obj is None: raise HTTPException(status_code=404, detail=\"subplace not found\") return obj @location_router.patch(\"/place/update/{place_id}\") def place_update(place_id: int, place: PlaceBase, session=Depends(get_session)) -> Place: db_place = session.get(place, place_id) if not db_place: raise HTTPException(status_code=404, detail=\"place not found\") place_data = place.model_dump(exclude_unset=True) for key, value in place_data.items(): setattr(db_place, key, value) session.add(db_place) session.commit() session.refresh(db_place) return db_place @location_router.delete(\"/place/delete/{place_id}\") def place_delete(place_id: int, session=Depends(get_session)): place = session.get(Place, place_id) if not place: raise HTTPException(status_code=404, detail=\"place not found\") session.delete(place) session.commit() return {\"ok\": True}","title":"Locations"},{"location":"lab1/endpoints/#travel","text":"@travel_router.post(\"/travel-create\") def travel_create(travel: TravelBase, session=Depends(get_session)) \\ -> TypedDict('Response', {\"status\": int, \"data\": Travel}): travel = Travel.model_validate(travel) session.add(travel) session.commit() session.refresh(travel) return {\"status\": 200, \"data\": travel} @travel_router.get(\"/list-travels\") def travels_list(session=Depends(get_session)) -> list[Travel]: return session.query(Travel).all() @travel_router.get(\"/travel/{travel_id}\", response_model=TravelShow) def travel_get(travel_id: int, session=Depends(get_session)): obj = session.get(Travel, travel_id) if obj is None: raise HTTPException(status_code=404, detail=\"subtravel not found\") return obj @travel_router.patch(\"/travel/update/{travel_id}\") def travel_update(travel_id: int, travel: TravelBase, session=Depends(get_session)) -> Travel: db_travel = session.get(Travel, travel_id) if not db_travel: raise HTTPException(status_code=404, detail=\"travel not found\") travel_data = travel.model_dump(exclude_unset=True) for key, value in travel_data.items(): setattr(db_travel, key, value) session.add(db_travel) session.commit() session.refresh(db_travel) return db_travel @travel_router.delete(\"/travel/delete/{travel_id}\") def travel_delete(travel_id: int, session=Depends(get_session)): travel = session.get(Travel, travel_id) if not travel: raise HTTPException(status_code=404, detail=\"travel not found\") session.delete(travel) session.commit() return {\"ok\": True} @travel_router.post(\"/travel-together-create\") def traveltogether_create(travel: TravelTogetherBase, session=Depends(get_session)) \\ -> TypedDict('Response', {\"status\": int, \"data\": TravelTogether}): travel = TravelTogether.model_validate(travel) session.add(travel) session.commit() session.refresh(travel) return {\"status\": 200, \"data\": travel} @travel_router.get(\"/list-traveltogethers\") def traveltogethers_list(session=Depends(get_session)) -> list[TravelTogether]: return session.query(TravelTogether).all() @travel_router.get(\"/traveltogether/{travel_id}\", response_model=TravelTogetherShow) def traveltogether_get(travel_id: int, session=Depends(get_session)): obj = session.get(TravelTogether, travel_id) if obj is None: raise HTTPException(status_code=404, detail=\"travel not found\") return obj @travel_router.patch(\"/traveltogether/update/{travel_id}\") def traveltogether_update(travel_id: int, travel: TravelTogetherBase, session=Depends(get_session)) -> TravelTogether: db_travel = session.get(TravelTogether, travel_id) if not db_travel: raise HTTPException(status_code=404, detail=\"travel not found\") travel_data = travel.model_dump(exclude_unset=True) for key, value in travel_data.items(): setattr(db_travel, key, value) session.add(db_travel) session.commit() session.refresh(db_travel) return db_travel @travel_router.delete(\"/traveltogether/delete/{travel_id}\") def traveltogether_delete(travel_id: int, session=Depends(get_session)): travel = session.get(TravelTogether, travel_id) if not travel: raise HTTPException(status_code=404, detail=\"travel not found\") session.delete(travel) session.commit() return {\"ok\": True}","title":"Travel"},{"location":"lab1/models/","text":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438: User - \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u0439 Area - \u0413\u043e\u0440\u043e\u0434, \u0420\u0430\u0439\u043e\u043d \u0438\u043b\u0438 \u043e\u0431\u043b\u0430\u0441\u0442\u044c Place - \u041c\u0435\u0441\u0442\u043e \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 (\u043e\u0442\u0435\u043b\u044c, \u0434\u043e\u0441\u0442\u043e\u043f\u0440\u0438\u043c\u0435\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c) Travel - \u041f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u0435 TravelTogether - \u0421\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0435 \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u0435 User class UserBase(SQLModel): username: str class UserCreate(UserBase): password: str class UserShow(UserBase): travels: Optional[List[\"Travel\"]] = None traveltogethers: Optional[List[\"TravelTogether\"]] = None class User(UserCreate, table=True): id: int = Field(default=None, primary_key=True) travels: Optional[List[\"Travel\"]] = Relationship( back_populates=\"travellers\", link_model=TravelTogether ) traveltogethers: Optional[List[\"TravelTogether\"]] = Relationship(back_populates=\"travellers\") class ChangePassword(SQLModel): old_password: str new_password: str Area class AreaBase(SQLModel): name: str description: str class AreaShow(AreaBase): places: Optional[List[\"Place\"]] = None class Area(AreaBase, table=True): id: int = Field(default=None, primary_key=True) places: Optional[List[\"Place\"]] = Relationship(back_populates=\"area\", sa_relationship_kwargs={ \"cascade\": \"all, delete\", } ) from_location: Optional[\"Travel\"] = Relationship(back_populates=\"location_from\", sa_relationship_kwargs= dict(foreign_keys=\"[Travel.location_from_id]\"), ) to_location: Optional[\"Travel\"] = Relationship(back_populates=\"location_to\", sa_relationship_kwargs= dict(foreign_keys=\"[Travel.location_to_id]\"), ) Place class PlaceBase(SQLModel): name: str description: str place_rating: PlaceRating area_id: Optional[int] = Field(default=None, foreign_key=\"area.id\") class PlaceShow(PlaceBase): area: Optional[\"Area\"] = None class Place(PlaceBase, table=True): id: int = Field(default=None, primary_key=True) area: Optional[\"Area\"] = Relationship(back_populates=\"places\") place: Optional[int] Travel class TravelBase(SQLModel): location_from_id: Optional[int] = Field(default=None, foreign_key=\"area.id\") location_to_id: Optional[int] = Field(default=None, foreign_key=\"area.id\") path_description: str date_start: datetime.datetime date_end: datetime.datetime type_of_travel: TypeOfTravel smth: str class TravelShow(TravelBase): location_from: Optional[\"Area\"] = None location_to: Optional[\"Area\"] = None travellers: Optional[List[\"UserBase\"]] = None traveltogethers: Optional[List[\"TravelTogether\"]] = None class Travel(TravelBase, table=True): id: int = Field(default=None, primary_key=True) location_from: Optional[\"Area\"] = Relationship(back_populates=\"from_location\", sa_relationship_kwargs= dict(foreign_keys=\"[Travel.location_from_id]\"), ) location_to: Optional[\"Area\"] = Relationship(back_populates=\"to_location\", sa_relationship_kwargs= dict(foreign_keys=\"[Travel.location_to_id]\"), ) travellers: Optional[List[\"User\"]] = Relationship( back_populates=\"travels\", link_model=TravelTogether ) traveltogethers: Optional[List[\"TravelTogether\"]] = Relationship(back_populates=\"travels\") TravelTogether class TravelTogetherBase(SQLModel): comment: str travel_id: Optional[int] = Field(default=None, foreign_key=\"travel.id\") traveller_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") class TravelTogetherShow(TravelTogetherBase): travels: Optional[\"Travel\"] = None travellers: Optional[\"User\"] = None class TravelTogether(TravelTogetherBase, table=True): id: int = Field(default=None, primary_key=True) travels: Optional[\"Travel\"] = Relationship(back_populates=\"traveltogethers\") travellers: Optional[\"User\"] = Relationship(back_populates=\"traveltogethers\") field_new: Optional[int] = None","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"lab1/models/#_1","text":"\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438: User - \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u0439 Area - \u0413\u043e\u0440\u043e\u0434, \u0420\u0430\u0439\u043e\u043d \u0438\u043b\u0438 \u043e\u0431\u043b\u0430\u0441\u0442\u044c Place - \u041c\u0435\u0441\u0442\u043e \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 (\u043e\u0442\u0435\u043b\u044c, \u0434\u043e\u0441\u0442\u043e\u043f\u0440\u0438\u043c\u0435\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c) Travel - \u041f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u0435 TravelTogether - \u0421\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0435 \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u0435","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"lab1/models/#user","text":"class UserBase(SQLModel): username: str class UserCreate(UserBase): password: str class UserShow(UserBase): travels: Optional[List[\"Travel\"]] = None traveltogethers: Optional[List[\"TravelTogether\"]] = None class User(UserCreate, table=True): id: int = Field(default=None, primary_key=True) travels: Optional[List[\"Travel\"]] = Relationship( back_populates=\"travellers\", link_model=TravelTogether ) traveltogethers: Optional[List[\"TravelTogether\"]] = Relationship(back_populates=\"travellers\") class ChangePassword(SQLModel): old_password: str new_password: str","title":"User"},{"location":"lab1/models/#area","text":"class AreaBase(SQLModel): name: str description: str class AreaShow(AreaBase): places: Optional[List[\"Place\"]] = None class Area(AreaBase, table=True): id: int = Field(default=None, primary_key=True) places: Optional[List[\"Place\"]] = Relationship(back_populates=\"area\", sa_relationship_kwargs={ \"cascade\": \"all, delete\", } ) from_location: Optional[\"Travel\"] = Relationship(back_populates=\"location_from\", sa_relationship_kwargs= dict(foreign_keys=\"[Travel.location_from_id]\"), ) to_location: Optional[\"Travel\"] = Relationship(back_populates=\"location_to\", sa_relationship_kwargs= dict(foreign_keys=\"[Travel.location_to_id]\"), )","title":"Area"},{"location":"lab1/models/#place","text":"class PlaceBase(SQLModel): name: str description: str place_rating: PlaceRating area_id: Optional[int] = Field(default=None, foreign_key=\"area.id\") class PlaceShow(PlaceBase): area: Optional[\"Area\"] = None class Place(PlaceBase, table=True): id: int = Field(default=None, primary_key=True) area: Optional[\"Area\"] = Relationship(back_populates=\"places\") place: Optional[int]","title":"Place"},{"location":"lab1/models/#travel","text":"class TravelBase(SQLModel): location_from_id: Optional[int] = Field(default=None, foreign_key=\"area.id\") location_to_id: Optional[int] = Field(default=None, foreign_key=\"area.id\") path_description: str date_start: datetime.datetime date_end: datetime.datetime type_of_travel: TypeOfTravel smth: str class TravelShow(TravelBase): location_from: Optional[\"Area\"] = None location_to: Optional[\"Area\"] = None travellers: Optional[List[\"UserBase\"]] = None traveltogethers: Optional[List[\"TravelTogether\"]] = None class Travel(TravelBase, table=True): id: int = Field(default=None, primary_key=True) location_from: Optional[\"Area\"] = Relationship(back_populates=\"from_location\", sa_relationship_kwargs= dict(foreign_keys=\"[Travel.location_from_id]\"), ) location_to: Optional[\"Area\"] = Relationship(back_populates=\"to_location\", sa_relationship_kwargs= dict(foreign_keys=\"[Travel.location_to_id]\"), ) travellers: Optional[List[\"User\"]] = Relationship( back_populates=\"travels\", link_model=TravelTogether ) traveltogethers: Optional[List[\"TravelTogether\"]] = Relationship(back_populates=\"travels\")","title":"Travel"},{"location":"lab1/models/#traveltogether","text":"class TravelTogetherBase(SQLModel): comment: str travel_id: Optional[int] = Field(default=None, foreign_key=\"travel.id\") traveller_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") class TravelTogetherShow(TravelTogetherBase): travels: Optional[\"Travel\"] = None travellers: Optional[\"User\"] = None class TravelTogether(TravelTogetherBase, table=True): id: int = Field(default=None, primary_key=True) travels: Optional[\"Travel\"] = Relationship(back_populates=\"traveltogethers\") travellers: Optional[\"User\"] = Relationship(back_populates=\"traveltogethers\") field_new: Optional[int] = None","title":"TravelTogether"},{"location":"lab1/routes/","text":"\u0420\u043e\u0443\u0442\u0435\u0440 \u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0410\u041f\u0418. main.py from fastapi import FastAPI import uvicorn from database import init_db from endpoints.location_endpoints import location_router from endpoints.travel_endpoints import travel_router from endpoints.auth_endpoints import auth_router from endpoints.user_endpoints import user_router app = FastAPI() app.include_router(location_router, prefix=\"/api/locations\", tags=[\"locations\"]) app.include_router(travel_router, prefix=\"/api/travels\", tags=[\"travels\"]) app.include_router(auth_router, prefix=\"/api\", tags=[\"auth\"]) app.include_router(user_router, prefix=\"/api/users\", tags=[\"users\"]) @app.on_event(\"startup\") def on_startup(): init_db() if __name__ == '__main__': uvicorn.run('main:app', host=\"localhost\", port=8000, reload=True)","title":"\u0420\u043e\u0443\u0442\u0435\u0440"},{"location":"lab1/routes/#_1","text":"\u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0410\u041f\u0418.","title":"\u0420\u043e\u0443\u0442\u0435\u0440"},{"location":"lab1/routes/#mainpy","text":"from fastapi import FastAPI import uvicorn from database import init_db from endpoints.location_endpoints import location_router from endpoints.travel_endpoints import travel_router from endpoints.auth_endpoints import auth_router from endpoints.user_endpoints import user_router app = FastAPI() app.include_router(location_router, prefix=\"/api/locations\", tags=[\"locations\"]) app.include_router(travel_router, prefix=\"/api/travels\", tags=[\"travels\"]) app.include_router(auth_router, prefix=\"/api\", tags=[\"auth\"]) app.include_router(user_router, prefix=\"/api/users\", tags=[\"users\"]) @app.on_event(\"startup\") def on_startup(): init_db() if __name__ == '__main__': uvicorn.run('main:app', host=\"localhost\", port=8000, reload=True)","title":"main.py"},{"location":"lab2/task-1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 3 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u0432 python \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438: multiprocessing threading async multiprocessing def mp_calculate_part(s, e, res, idx): res[idx] = sum(range(s, e + 1)) def mp_calculate_sum(): num_tasks = 4 n = 1000000 tasks_list = [] step = n // num_tasks manager = multiprocessing.Manager() res = manager.list([0] * num_tasks) for i in range(num_tasks): s = i * step + 1 e = (i + 1) * step if i != num_tasks - 1 else n process = multiprocessing.Process(target=mp_calculate_part, args=(s, e, res, i)) tasks_list.append(process) process.start() for process in tasks_list: process.join() _sum = sum(res) return _sum async async def async_calculate_part(s, e): return sum(range(s, e + 1)) async def async_calculate_sum(): num_tasks = 4 n = 1000000 step = n // num_tasks tasks = [] for i in range(num_tasks): s = i * step + 1 e = (i + 1) * step if i != num_tasks - 1 else n tasks.append(asyncio.create_task(async_calculate_part(s, e))) results = await asyncio.gather(*tasks) total_sum = sum(results) return total_sum threading def thread_calculate_part(s, e, res, idx): res[idx] = sum(range(s, e + 1)) def thread_calculate_sum(): num_tasks = 4 n = 1000000 tasks_list = [] result = [0] * num_tasks step = n // num_tasks for i in range(num_tasks): start = i * step + 1 end = (i + 1) * step if i != num_tasks - 1 else n thread = threading.Thread(target=thread_calculate_part, args=(start, end, result, i)) tasks_list.append(thread) thread.start() for thread in tasks_list: thread.join() total_sum = sum(result) return total_sum \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b Async time: 0.04663729667663574 seconds Multiprocessing time: 0.6678276062011719 seconds Threading time: 0.05602765083312988 seconds \u0412\u044b\u0432\u043e\u0434\u044b \u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0435\u0431\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u0430\u0441\u0438\u043d\u043a \u0438 \u0442\u0440\u044d\u0434\u0438\u043d\u0433, \u0447\u0435\u043c \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433, \u0442\u0430\u043a \u043a\u0430\u043a \u0432 \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433\u0435 \u0435\u0441\u0442\u044c \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"lab2/task-1/#1","text":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 3 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u0432 python \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438: multiprocessing threading async","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"lab2/task-1/#multiprocessing","text":"def mp_calculate_part(s, e, res, idx): res[idx] = sum(range(s, e + 1)) def mp_calculate_sum(): num_tasks = 4 n = 1000000 tasks_list = [] step = n // num_tasks manager = multiprocessing.Manager() res = manager.list([0] * num_tasks) for i in range(num_tasks): s = i * step + 1 e = (i + 1) * step if i != num_tasks - 1 else n process = multiprocessing.Process(target=mp_calculate_part, args=(s, e, res, i)) tasks_list.append(process) process.start() for process in tasks_list: process.join() _sum = sum(res) return _sum","title":"multiprocessing"},{"location":"lab2/task-1/#async","text":"async def async_calculate_part(s, e): return sum(range(s, e + 1)) async def async_calculate_sum(): num_tasks = 4 n = 1000000 step = n // num_tasks tasks = [] for i in range(num_tasks): s = i * step + 1 e = (i + 1) * step if i != num_tasks - 1 else n tasks.append(asyncio.create_task(async_calculate_part(s, e))) results = await asyncio.gather(*tasks) total_sum = sum(results) return total_sum","title":"async"},{"location":"lab2/task-1/#threading","text":"def thread_calculate_part(s, e, res, idx): res[idx] = sum(range(s, e + 1)) def thread_calculate_sum(): num_tasks = 4 n = 1000000 tasks_list = [] result = [0] * num_tasks step = n // num_tasks for i in range(num_tasks): start = i * step + 1 end = (i + 1) * step if i != num_tasks - 1 else n thread = threading.Thread(target=thread_calculate_part, args=(start, end, result, i)) tasks_list.append(thread) thread.start() for thread in tasks_list: thread.join() total_sum = sum(result) return total_sum","title":"threading"},{"location":"lab2/task-1/#_1","text":"Async time: 0.04663729667663574 seconds Multiprocessing time: 0.6678276062011719 seconds Threading time: 0.05602765083312988 seconds","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b"},{"location":"lab2/task-1/#_2","text":"\u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0435\u0431\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u0430\u0441\u0438\u043d\u043a \u0438 \u0442\u0440\u044d\u0434\u0438\u043d\u0433, \u0447\u0435\u043c \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433, \u0442\u0430\u043a \u043a\u0430\u043a \u0432 \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433\u0435 \u0435\u0441\u0442\u044c \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432","title":"\u0412\u044b\u0432\u043e\u0434\u044b"},{"location":"lab2/task-2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u044f \u0432\u0437\u044f\u043b \u0441\u0430\u0439\u0442 \u043a\u043d\u0438\u0436\u043d\u043e\u0433\u043e \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430 http://books.toscrape.com/ \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043a\u043e\u0434 \u043d\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 thread \u041a\u043e\u0434 def thread_parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') title = soup.title.string if soup.title else 'No title' conn = psycopg2.connect(os.getenv(\"DB_URL\")) curs = conn.cursor() curs.execute( \"INSERT INTO site (url, title, process_type) VALUES (%s, %s, %s)\", (url, title, 'threading') ) conn.commit() curs.close() conn.close() def thread_main(): threads = [] for url in urls: thread = threading.Thread(target=thread_parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join() \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b async time 1.0034692287445068 muliprocess time 1.8474524021148682 thread time 0.7449815273284912 \u0412\u044b\u0432\u043e\u0434\u044b \u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0443 async , \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b threading \u043e\u043a\u0430\u0437\u0430\u043b\u0438\u0441\u044c \u0445\u0443\u0436\u0435 \u0438\u0437-\u0437\u0430 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430 python, \u043f\u043e\u0442\u043e\u043a\u0438 \u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u043a\u043e\u0434 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0425\u0443\u0436\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0435\u0431\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b multiprocessing , \u0441\u0430\u043c\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043c\u0438\u043d\u043e\u0440\u043d\u044b\u0435, \u043d\u043e \u043d\u0430 \u0438\u0445 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u0445\u043e\u0434\u0438\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432, \u0447\u0435\u043c \u0432 threading \u0438\u043b\u0438 async","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"lab2/task-2/#2","text":"\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u044f \u0432\u0437\u044f\u043b \u0441\u0430\u0439\u0442 \u043a\u043d\u0438\u0436\u043d\u043e\u0433\u043e \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430 http://books.toscrape.com/ \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043a\u043e\u0434 \u043d\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 thread","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"lab2/task-2/#_1","text":"def thread_parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') title = soup.title.string if soup.title else 'No title' conn = psycopg2.connect(os.getenv(\"DB_URL\")) curs = conn.cursor() curs.execute( \"INSERT INTO site (url, title, process_type) VALUES (%s, %s, %s)\", (url, title, 'threading') ) conn.commit() curs.close() conn.close() def thread_main(): threads = [] for url in urls: thread = threading.Thread(target=thread_parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join()","title":"\u041a\u043e\u0434"},{"location":"lab2/task-2/#_2","text":"async time 1.0034692287445068 muliprocess time 1.8474524021148682 thread time 0.7449815273284912","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b"},{"location":"lab2/task-2/#_3","text":"\u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0443 async , \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b threading \u043e\u043a\u0430\u0437\u0430\u043b\u0438\u0441\u044c \u0445\u0443\u0436\u0435 \u0438\u0437-\u0437\u0430 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430 python, \u043f\u043e\u0442\u043e\u043a\u0438 \u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u043a\u043e\u0434 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0425\u0443\u0436\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0435\u0431\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b multiprocessing , \u0441\u0430\u043c\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043c\u0438\u043d\u043e\u0440\u043d\u044b\u0435, \u043d\u043e \u043d\u0430 \u0438\u0445 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u0445\u043e\u0434\u0438\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432, \u0447\u0435\u043c \u0432 threading \u0438\u043b\u0438 async","title":"\u0412\u044b\u0432\u043e\u0434\u044b"},{"location":"lab3/base/","text":"\u041e\u0441\u043d\u043e\u0432\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0434\u0432\u0435 \u043f\u0440\u043e\u0448\u043b\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u043d\u044b \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u044b celery \u0438 redis. travel_app - \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u043f\u0435\u0440\u0432\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b docker_2 - \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 celery - \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 Celery redis - \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 PostgreSQL lab_3_bd - \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 Redis, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u044f\u043c\u0438 \u0437\u0430\u0434\u0430\u0447 \u0432 Celery","title":"\u041e\u0441\u043d\u043e\u0432\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"lab3/base/#_1","text":"\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0434\u0432\u0435 \u043f\u0440\u043e\u0448\u043b\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u043d\u044b \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u044b celery \u0438 redis. travel_app - \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u043f\u0435\u0440\u0432\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b docker_2 - \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 celery - \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 Celery redis - \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 PostgreSQL lab_3_bd - \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441 Redis, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u044f\u043c\u0438 \u0437\u0430\u0434\u0430\u0447 \u0432 Celery","title":"\u041e\u0441\u043d\u043e\u0432\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"lab3/celery/","text":"Celery parse.py celery_app = Celery( \"worker\", broker=\"redis://redis:6379/0\", backend=\"redis://redis:6379/0\", ) celery_app.conf.update( task_routes={ \"parse.parse_and_save\": \"main-queue\", }, ) @celery_app.task def parse_and_save(url, session): response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') title = soup.title.string if soup.title else 'No title' new_article = Parce( url = url, article_title = title ) session.add(new_article) session.commit()","title":"Celery"},{"location":"lab3/celery/#celery","text":"","title":"Celery"},{"location":"lab3/celery/#parsepy","text":"celery_app = Celery( \"worker\", broker=\"redis://redis:6379/0\", backend=\"redis://redis:6379/0\", ) celery_app.conf.update( task_routes={ \"parse.parse_and_save\": \"main-queue\", }, ) @celery_app.task def parse_and_save(url, session): response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') title = soup.title.string if soup.title else 'No title' new_article = Parce( url = url, article_title = title ) session.add(new_article) session.commit()","title":"parse.py"},{"location":"lab3/docker/","text":"\u0414\u043e\u043a\u0435\u0440 Dockerfile FROM python:3.10-alpine3.19 WORKDIR /docker_1 COPY . . RUN pip3 install -r requirements.txt CMD uvicorn main:app --host localhost --port 8000 docker-compose.yml services: lab_3_bd: container_name: lab_3_bd image: postgres restart: always environment: - POSTGRES_PASSWORD=1122 - POSTGRES_USER=postgres - POSTGRES_DB=web_data - POSTGRES_PORT=5432 volumes: - postgres_data:/var/lib/postgresql/data/ ports: - \"5432:5432\" networks: - backend travel_app: container_name: travel_app build: context: ./docker_1 env_file: .env depends_on: - lab_3_bd ports: - \"8000:8000\" command: uvicorn main:app --host 0.0.0.0 --port 8000 networks: - backend restart: always docker_2: container_name: docker_2 build: context: ./docker_2 env_file: .env depends_on: - lab_3_bd ports: - \"8001:8001\" command: uvicorn main:app --host 0.0.0.0 --port 8001 networks: - backend restart: always dns: - 8.8.8.8 - 8.8.4.4 celery: build: context: ./docker_2 container_name: celery command: celery -A run_celery worker --loglevel=info restart: always depends_on: - redis - lab_3_bd networks: - backend redis: image: redis ports: - \"6379:6379\" networks: - backend volumes: postgres_data: networks: backend: driver: bridge","title":"\u0414\u043e\u043a\u0435\u0440"},{"location":"lab3/docker/#_1","text":"","title":"\u0414\u043e\u043a\u0435\u0440"},{"location":"lab3/docker/#dockerfile","text":"FROM python:3.10-alpine3.19 WORKDIR /docker_1 COPY . . RUN pip3 install -r requirements.txt CMD uvicorn main:app --host localhost --port 8000","title":"Dockerfile"},{"location":"lab3/docker/#docker-composeyml","text":"services: lab_3_bd: container_name: lab_3_bd image: postgres restart: always environment: - POSTGRES_PASSWORD=1122 - POSTGRES_USER=postgres - POSTGRES_DB=web_data - POSTGRES_PORT=5432 volumes: - postgres_data:/var/lib/postgresql/data/ ports: - \"5432:5432\" networks: - backend travel_app: container_name: travel_app build: context: ./docker_1 env_file: .env depends_on: - lab_3_bd ports: - \"8000:8000\" command: uvicorn main:app --host 0.0.0.0 --port 8000 networks: - backend restart: always docker_2: container_name: docker_2 build: context: ./docker_2 env_file: .env depends_on: - lab_3_bd ports: - \"8001:8001\" command: uvicorn main:app --host 0.0.0.0 --port 8001 networks: - backend restart: always dns: - 8.8.8.8 - 8.8.4.4 celery: build: context: ./docker_2 container_name: celery command: celery -A run_celery worker --loglevel=info restart: always depends_on: - redis - lab_3_bd networks: - backend redis: image: redis ports: - \"6379:6379\" networks: - backend volumes: postgres_data: networks: backend: driver: bridge","title":"docker-compose.yml"}]}